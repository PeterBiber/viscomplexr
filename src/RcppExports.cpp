// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// mandel_1
std::complex<double> mandel_1(std::complex<double> z, int itDepth);
RcppExport SEXP _viscomplexr_mandel_1(SEXP zSEXP, SEXP itDepthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::complex<double> >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type itDepth(itDepthSEXP);
    rcpp_result_gen = Rcpp::wrap(mandel_1(z, itDepth));
    return rcpp_result_gen;
END_RCPP
}
// mandel_2
std::complex<double> mandel_2(std::complex<double> z, int itDepth);
RcppExport SEXP _viscomplexr_mandel_2(SEXP zSEXP, SEXP itDepthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::complex<double> >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type itDepth(itDepthSEXP);
    rcpp_result_gen = Rcpp::wrap(mandel_2(z, itDepth));
    return rcpp_result_gen;
END_RCPP
}
// mandel_3
std::complex<double> mandel_3(std::complex<double> z, int itDepth);
RcppExport SEXP _viscomplexr_mandel_3(SEXP zSEXP, SEXP itDepthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::complex<double> >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type itDepth(itDepthSEXP);
    rcpp_result_gen = Rcpp::wrap(mandel_3(z, itDepth));
    return rcpp_result_gen;
END_RCPP
}
// mandel_4
std::complex<double> mandel_4(std::complex<double> z, int itDepth);
RcppExport SEXP _viscomplexr_mandel_4(SEXP zSEXP, SEXP itDepthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::complex<double> >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type itDepth(itDepthSEXP);
    rcpp_result_gen = Rcpp::wrap(mandel_4(z, itDepth));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_viscomplexr_mandel_1", (DL_FUNC) &_viscomplexr_mandel_1, 2},
    {"_viscomplexr_mandel_2", (DL_FUNC) &_viscomplexr_mandel_2, 2},
    {"_viscomplexr_mandel_3", (DL_FUNC) &_viscomplexr_mandel_3, 2},
    {"_viscomplexr_mandel_4", (DL_FUNC) &_viscomplexr_mandel_4, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_viscomplexr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
